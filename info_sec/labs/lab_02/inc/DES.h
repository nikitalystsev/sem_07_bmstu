//
// Created by nikitalystsev on 15.10.2024.
//

#ifndef LAB_02_DES_H
#define LAB_02_DES_H

#include <bitset>
#include <array>
#include <vector>

using namespace std;

class DES {
private:
    // все необходимые для DES таблицы перестановок
    const array<int, 64> _ip = { // таблица начальной перестановки
            58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
            57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3,
            61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7
    };
    const array<int, 64> _ipInv = { // таблица конечной перестановки
            40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
            38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
            36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
            34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25
    };

    const array<int, 48> _e = { // таблица функции расширения
            32, 1, 2, 3, 4, 5,
            4, 5, 6, 7, 8, 9,
            8, 9, 10, 11, 12, 13,
            12, 13, 14, 15, 16, 17,
            16, 17, 18, 19, 20, 21,
            20, 21, 22, 23, 24, 25,
            24, 25, 26, 27, 28, 29,
            28, 29, 30, 31, 32, 1
    };
    const array<array<array<int, 16>, 4>, 8> _s = { // таблицы преобразования для S_i
            array<array<int, 16>, 4>{
                    array<int, 16>{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
                    array<int, 16>{0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
                    array<int, 16>{4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
                    array<int, 16>{15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}
            },
            array<array<int, 16>, 4>{
                    array<int, 16>{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
                    array<int, 16>{3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
                    array<int, 16>{0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
                    array<int, 16>{13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}
            },
            array<array<int, 16>, 4>{
                    array<int, 16>{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
                    array<int, 16>{13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
                    array<int, 16>{13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
                    array<int, 16>{1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}
            },
            array<array<int, 16>, 4>{
                    array<int, 16>{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
                    array<int, 16>{13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
                    array<int, 16>{10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
                    array<int, 16>{3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}
            },
            array<array<int, 16>, 4>{
                    array<int, 16>{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
                    array<int, 16>{14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
                    array<int, 16>{4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
                    array<int, 16>{11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}
            },
            array<array<int, 16>, 4>{
                    array<int, 16>{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
                    array<int, 16>{10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
                    array<int, 16>{9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
                    array<int, 16>{4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}
            },
            array<array<int, 16>, 4>{
                    array<int, 16>{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
                    array<int, 16>{13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
                    array<int, 16>{1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
                    array<int, 16>{6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}
            },
            array<array<int, 16>, 4>{
                    array<int, 16>{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
                    array<int, 16>{1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
                    array<int, 16>{7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
                    array<int, 16>{2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}
            }
    };

    const array<int, 32> _p = { // перестановка в конце вычисления значения функции Фейстеля
            16, 7, 20, 21, 29, 12, 28, 17,
            1, 15, 23, 26, 5, 18, 31, 10,
            2, 8, 24, 14, 32, 27, 3, 9,
            19, 13, 30, 6, 22, 11, 4, 25
    };

    const array<int, 56> _p1Ki = { // первая перестановка при генерации k_i ключа
            57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18,
            10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36,
            63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22,
            14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4
    };

    const array<int, 16> _kiLeftShiftCnt = { // таблицы циклического сдвига влево на заданное число бит при генерации k_i ключа
            1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1
    };

    const array<int, 48> _p2Ki = { // вторая перестановка при генерации k_i ключа
            14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4,
            26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30,
            40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32
    };

private:
    bitset<64> _applyIP(bitset<64> block);

    // функции генерации ключей раундов
    bitset<56> _applyP1Ki(bitset<64> key);

    bitset<48> _applyP2Ki(bitset<56> key);

    static pair<bitset<28>, bitset<28>> _p1KeyToC0D0(bitset<56> p1Key);

    static bitset<28> _applyCycleLeftShift(bitset<28> value, int cntBitsForShift);
    // end функции генерации ключей раундов

    vector<bitset<48>> _genRoundKeys(bitset<64> key);

    static pair<bitset<32>, bitset<32>> _iPBlockToL0R0(bitset<64> iPBlock);

    pair<bitset<32>, bitset<32>> _round(bitset<32> Li_minus_1, bitset<32> Ri_minus_1, bitset<48> ki);

    bitset<32> _f(bitset<32> Ri_minus_1, bitset<48> ki); // функция Фейстеля

    bitset<48> _applyE(bitset<32> Ri_minus_1);

    bitset<4> _applyS(bitset<6> value, int i);

    bitset<32> _applyP(bitset<32> value);

    bitset<64> _applyIpInv(bitset<32> Li, bitset<32> Ri);
public:
    DES() = default;

    bitset<64> encryptBlock(bitset<64> block, bitset<64> key);
};


#endif //LAB_02_DES_H
