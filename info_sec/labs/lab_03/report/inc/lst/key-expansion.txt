vector<vector<vector<uint8_t>>> AES::_keyExpansion(const vector<uint8_t> &key) {
    vector<vector<uint8_t>> keyAsMtrWords = this->_keyToMtrWords(key);

    vector<vector<uint8_t>> resultWords(this->_nb * (this->_nr + 1), vector<uint8_t>(this->_nb));
    for (int i = 0; i < keyAsMtrWords.size(); i++) {
        resultWords[i] = keyAsMtrWords[i];
    }
	
	for (int i = this->_nk; i < this->_nb * (this->_nr + 1); i++) {
        vector<uint8_t> tmpWord = resultWords[i - 1];

        if (i % this->_nk == 0) {
            auto tmp = this->_subWord(AES::_rotWord(tmpWord));
            tmpWord = AES::_xorWordAndRcon(tmp, this->_rcon[i / this->_nk]);
        } else if (this->_nk > 6 and i % this->_nk == 4) {
            tmpWord = this->_subWord(tmpWord);
        }

        resultWords[i] = AES::_xorTwoWords(resultWords[i - this->_nk], tmpWord);
    }

    return this->_convertVecWordsToVecRoundKeys(resultWords);
}