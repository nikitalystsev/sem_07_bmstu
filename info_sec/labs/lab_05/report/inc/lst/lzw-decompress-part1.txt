vector<uint8_t> LZW::_decompress(const vector<uint8_t> &data) {
    LZW::_initDict(this->_dict);
    vector<vector<uint8_t>> tmpKeys;
    LZW::_initVectorKeys(tmpKeys);
	
    vector<uint8_t> result;

    vector<uint8_t> s; 

    uint32_t prevCode = codes[0];
    vector<uint8_t> entry = this->_getKeyByCode(tmpKeys, prevCode);
    result.insert(result.end(), entry.begin(), entry.end());

    for (int i = 1; i < data.size(); ++i) {

        uint32_t currCode = codes[i];
        entry = this->_getKeyByCode(tmpKeys, currCode);

        if (!entry.empty()) {
            result.insert(result.end(), entry.begin(), entry.end());

            uint8_t ch = entry[0];

            vector<uint8_t> tmp = {ch};
            vector<uint8_t> newEntry = this->_getKeyByCode(tmpKeys, prevCode);
            tmp.insert(tmp.begin(), newEntry.begin(), newEntry.end());

            this->_dict.insert(tmp);
            tmpKeys.push_back(tmp);

            prevCode = currCode;
        } else {
            vector<uint8_t> oldEntry = this->_getKeyByCode(tmpKeys, prevCode);
            oldEntry.push_back(oldEntry[0]);