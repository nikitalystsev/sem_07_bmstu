vector<uint8_t> LZW::_compress(const vector<uint8_t> &data) {
    LZW::_initDict(this->_dict);


    vector<pair<uint32_t, uint8_t>> tmpResult;

    vector<uint8_t> s; 

    for (uint8_t currByte: data) {
        vector<uint8_t> tmp = s;
        tmp.push_back(currByte);

        if (this->_dict.contains(tmp)) {
            s = tmp;
        } else {
            uint32_t code = this->_dict.encode(s);
            tmpResult.emplace_back(code, LZW::_getBitsToRepresentInteger(code));
            this->_dict.insert(tmp);
            s = vector<uint8_t>(1, currByte);
        }
    }

    uint32_t code = this->_dict.encode(s);
    tmpResult.emplace_back(code, LZW::_getBitsToRepresentInteger(code));

    return LZW::_vec32ToVec8(tmpResult);
}