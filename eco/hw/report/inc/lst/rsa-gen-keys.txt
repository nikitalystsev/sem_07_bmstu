pair<PrivateKey, PublicKey> RSA::genPublicAndSecretKeys() {
    mpz_class minVal(1), maxVal(string(40, '9'));

    auto [p, q] = RSA::_getRandomPrimePQ(minVal, maxVal);
	
    mpz_class n = p * q;
    mpz_class euler = (p - 1) * (q - 1);

    mpz_class e;

    while (true) {
        e = RSA::_genRandomNumber(1, euler);

        mpz_class resultGcd;
        mpz_gcd(resultGcd.get_mpz_t(), e.get_mpz_t(), euler.get_mpz_t());

        if (resultGcd == 1) {
            break;
        }
    }

    mpz_class g, s, t;

    mpz_gcdext(g.get_mpz_t(), s.get_mpz_t(), t.get_mpz_t(), e.get_mpz_t(), euler.get_mpz_t());

    mpz_class d(s);

    PublicKey publicKey{.e = e, .n = n};
    PrivateKey privateKey{.d = d, .n = n};

    return {privateKey, publicKey};
}